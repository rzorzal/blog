{"version":3,"sources":["contexts/github.js","components/Menu.js","components/Content.js","contexts/values/github.js","App.js","serviceWorker.js","index.js"],"names":["value","user","undefined","issues","selectedIssue","GitContext","React","createContext","Provider","Consumer","Menu","console","log","this","context","style","borderLeft","minHeight","padding","height","borderBottom","name","Component","contextType","GitHubContext","overflowY","marginBottom","backgroundColor","title","created_at","source","body","HOST","GitHubValues","fetch","response","ok","Error","json","data","message","App","state","Promise","all","getUser","getIssues","then","setState","Container","fluid","className","Row","Col","xs","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAGMA,EAAQ,CACVC,UAAMC,EACNC,OAAQ,GACRC,mBAAeF,GAGbG,EAAaC,IAAMC,cAAcP,GAKxBK,GAHYA,EAAWG,SACXH,EAAWI,SAEvBJ,GCRMK,E,8NAWb,OAFAC,QAAQC,IAAIC,KAAKC,SAGb,yBAAKC,MAAO,CAACC,WAAY,kBAAmBC,UAAU,QAASC,QAAS,QACpE,4BAAQH,MAAO,CAACI,OAAQ,OAAQC,aAAc,oBAC1C,4BAAOP,KAAKC,QAAQb,MAAQY,KAAKC,QAAQb,KAAKoB,MAAS,oB,GAdzCf,IAAMgB,WAAnBZ,EAEVa,YAAcC,E,2BCCJd,E,iLAKb,OACI,yBAAKK,MAAO,CAACE,UAAW,QAASQ,UAAW,OAAQP,QAAS,QACzD,yBAAKH,MAAO,CAACK,aAAc,kBAAmBF,QAAS,MAAOQ,aAAc,OAAQC,gBAAiB,SACjG,4BAAKd,KAAKC,QAAQV,eAAiBS,KAAKC,QAAQV,cAAcwB,OAC9D,+BACKf,KAAKC,QAAQV,eAAiBS,KAAKC,QAAQV,cAAcyB,aAGlE,yBAAKd,MAAO,CAACG,QAAS,SAClB,kBAAC,IAAD,CAAeY,OAAQjB,KAAKC,QAAQV,eAAiBS,KAAKC,QAAQV,cAAc2B,a,GAdlEzB,IAAMgB,WAAnBZ,EAEVa,YAAcC,E,6BCXnBQ,EAAO,yBAEQC,E,yOAGUC,MAAM,GAAD,OAAIF,EAAJ,mB,WAAtBG,E,QAEOC,G,sBACH,IAAIC,MAAM,6D,uBAGDF,EAASG,O,YAAtBC,E,QAEEC,Q,uBACE,IAAIH,MAAME,EAAKC,S,iCAGlBD,G,sQAKgBL,MAAM,GAAD,OAAIF,EAAJ,+B,WAAtBG,E,QAEOC,G,sBACH,IAAIC,MAAM,+D,uBAGDF,EAASG,O,YAAtBC,E,QAEEC,Q,uBACE,IAAIH,MAAME,EAAKC,S,iCAGlBD,G,yGCqBAE,E,2MAnCbC,MAAQ,CACNzC,UAAMC,EACNC,OAAQ,GACRC,mBAAeF,G,mFAGI,IAAD,OAClByC,QAAQC,IAAI,CACVX,EAAaY,UACbZ,EAAaa,cACZC,MAAK,YAAqB,IAAD,mBAAlB9C,EAAkB,KAAZE,EAAY,KAC1B,EAAK6C,SAAS,CAAE/C,OAAME,SAAQC,cAAeD,EAAO,U,+BAKtD,OACE,6BACE,kBAAC,EAAcK,SAAf,CAAwBR,MAAOa,KAAK6B,OAClC,kBAACO,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,QACzB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB,kBAAC,EAAD,OAEF,kBAACH,EAAA,EAAD,CAAKF,UAAU,qBAAqBG,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACpD,kBAAC,EAAD,e,GA3BElD,IAAMgB,WCNJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.a5fea0cc.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst value = {\n    user: undefined,\n    issues: [],\n    selectedIssue: undefined\n}\n\nconst GitContext = React.createContext(value);\n\nexport const GitProvider = GitContext.Provider;\nexport const GitConsumer = GitContext.Consumer;\n\nexport default GitContext;","import React from 'react';\n\nimport GitHubContext from '../contexts/github';\n\n\n\nexport default class Menu extends React.Component{\n\n    static contextType = GitHubContext;\n\n    componentDidMount(){\n    }\n\n    render(){\n\n        console.log(this.context);\n\n        return (\n            <div style={{borderLeft: \"1px solid black\", minHeight:\"100vh\", padding: '5px'}}>\n                <header style={{height: '20vh', borderBottom: '1px solid black'}}>\n                    <h2>{ (this.context.user && this.context.user.name) || \"Loading...\"}</h2>\n                </header>  \n                {/* <Items></Items> */}\n            </div>\n        )\n    }\n}","import './css/Markdown.css';\n\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport GitHubContext from '../contexts/github';\n\n\n\nexport default class Menu extends React.Component{\n\n    static contextType = GitHubContext;\n\n    render(){\n        return (\n            <div style={{minHeight: \"100vh\", overflowY: 'auto', padding: '5px'}}>\n                <div style={{borderBottom: \"1px solid black\", padding: \"5px\", marginBottom: '10px', backgroundColor: \"#ddd\"}}>\n                    <h1>{this.context.selectedIssue && this.context.selectedIssue.title}</h1>\n                    <small>\n                        {this.context.selectedIssue && this.context.selectedIssue.created_at}\n                    </small>\n                </div>\n                <div style={{padding: \"10px\"}}>\n                    <ReactMarkdown source={this.context.selectedIssue && this.context.selectedIssue.body} />\n                </div>\n            </div>\n        )\n    }\n}","const HOST = 'https://api.github.com';\n\nexport default class GitHubValues {\n    \n    static async getUser(){\n        const response = await fetch(`${HOST}/users/rzorzal`);\n\n        if(!response.ok){\n            throw new Error('Erro ao recuperar informações sobre o autor do Blog');\n        }\n\n        const data = await response.json();\n\n        if(data.message){\n            throw new Error(data.message)\n        }\n\n        return data;\n\n    }\n\n    static async getIssues(){\n        const response = await fetch(`${HOST}/repos/rzorzal/blog/issues`);\n\n        if(!response.ok){\n            throw new Error('Erro ao recuperar informações sobre as issues do Blog');\n        }\n\n        const data = await response.json();\n\n        if(data.message){\n            throw new Error(data.message)\n        }\n\n        return data;\n\n    }\n\n}","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Container,\n  Row,\n  Col\n} from 'reactstrap';\n\nimport Menu from './components/Menu';\nimport Content from './components/Content';\n\nimport GitHubValues from './contexts/values/github';\nimport GitHubContext from './contexts/github';\n\n\n\nclass App extends React.Component {\n\n  state = {\n    user: undefined,\n    issues: [],\n    selectedIssue: undefined\n  }\n\n  componentDidMount() {\n    Promise.all([\n      GitHubValues.getUser(),\n      GitHubValues.getIssues()\n    ]).then(([user, issues]) => {\n      this.setState({ user, issues, selectedIssue: issues[0] });\n    });\n  }\n\n  render() {\n    return (\n      <div >\n        <GitHubContext.Provider value={this.state}>\n          <Container fluid className=\"Root\">\n            <Row>\n              <Col xs=\"12\" md=\"9\" lg=\"9\">\n                <Content></Content>\n              </Col>\n              <Col className=\"RemovePaddingRigth\" xs=\"12\" md=\"3\" lg=\"3\">\n                <Menu></Menu>\n              </Col>\n            </Row>\n          </Container>\n        </GitHubContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}