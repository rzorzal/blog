{"version":3,"sources":["contexts/github.js","components/Menu.js","components/Content.js","contexts/values/github.js","App.js","serviceWorker.js","index.js"],"names":["value","user","undefined","issues","selectedIssue","GitContext","React","createContext","Provider","Consumer","Menu","className","style","backgroundImage","this","context","name","bio","Component","contextType","GitHubContext","minHeight","overflowY","padding","borderBottom","marginBottom","title","created_at","moment","format","source","body","HOST","GitHubValues","fetch","response","ok","Error","json","data","message","issueNumber","App","props","state","selectIssue","bind","onSelectedIssue","Promise","all","getUser","getIssues","then","a","setState","getSingleIssue","issueSelected","issue","number","Container","fluid","Row","Col","xs","md","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.461cfe7e.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst value = {\n    user: undefined,\n    issues: [],\n    selectedIssue: undefined\n}\n\nconst GitContext = React.createContext(value);\n\nexport const GitProvider = GitContext.Provider;\nexport const GitConsumer = GitContext.Consumer;\n\nexport default GitContext;","import React from 'react';\n\nimport {\n    Container,\n    Row,\n    Col\n} from 'reactstrap';\n\nimport GitHubContext from '../contexts/github';\n\nimport './css/Menu.css';\n\n\nexport default class Menu extends React.Component {\n\n    static contextType = GitHubContext;\n\n    render() {\n\n        return (\n            <div className=\"MenuContainer\">\n                <header>\n                    <div className=\"Avatar\" style={ {backgroundImage: `url('${(this.context.user && this.context.user['avatar_url']) || 'https://picsum.photos/120/120'}')` }} ></div>\n                    <h4>{(this.context.user && this.context.user.name) || \"Loading...\"}</h4>\n                    <h5>{(this.context.user && this.context.user.bio) || \"Loading...\"}</h5>\n                </header>\n                {/* <Items></Items> */}\n            </div>\n        )\n    }\n}","import './css/Markdown.css';\n\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nimport GitHubContext from '../contexts/github';\n\nimport moment from \"moment\";\n\n\nexport default class Menu extends React.Component{\n\n    static contextType = GitHubContext;\n\n    render(){\n        return (\n            <div style={{minHeight: \"100vh\", overflowY: 'auto', padding: '5px'}}>\n                <div style={{borderBottom: \"1px solid black\", padding: \"10px\", marginBottom: '10px'}}>\n                    <h1>{this.context.selectedIssue && this.context.selectedIssue.title}</h1>\n                    <small>\n                        {\n                            this.context.selectedIssue &&\n                            this.context.selectedIssue.created_at &&\n                            moment(this.context.selectedIssue.created_at).format('LL')\n                        }\n                    </small>\n                </div>\n                <div style={{padding: \"10px\"}}>\n                    <ReactMarkdown source={this.context.selectedIssue && this.context.selectedIssue.body} />\n                </div>\n            </div>\n        )\n    }\n}","const HOST = 'https://api.github.com';\n\nexport default class GitHubValues {\n    \n    static async getUser(){\n        const response = await fetch(`${HOST}/users/rzorzal`);\n\n        if(!response.ok){\n            throw new Error('Erro ao recuperar informações sobre o autor do Blog');\n        }\n\n        const data = await response.json();\n\n        if(data.message){\n            throw new Error(data.message)\n        }\n\n        return data;\n\n    }\n\n    static async getIssues(){\n        const response = await fetch(`${HOST}/repos/rzorzal/blog/issues?per_page=10&page=1&labels=posted`);\n\n        if(!response.ok){\n            throw new Error('Erro ao recuperar informações sobre as issues do Blog');\n        }\n\n        const data = await response.json();\n\n        if(data.message){\n            throw new Error(data.message)\n        }\n\n        return data;\n\n    }\n\n    static async getSingleIssue(issueNumber){\n        const response = await fetch(`${HOST}/repos/rzorzal/blog/issues/${issueNumber}`);\n\n        if(!response.ok){\n            throw new Error('Erro ao recuperar informações sobre uma issue do Blog');\n        }\n\n        const data = await response.json();\n\n        if(data.message){\n            throw new Error(data.message)\n        }\n\n        return data;\n\n    }\n\n}","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Container,\n  Row,\n  Col\n} from 'reactstrap';\n\nimport Menu from './components/Menu';\nimport Content from './components/Content';\n\nimport GitHubValues from './contexts/values/github';\nimport GitHubContext from './contexts/github';\n\n\nclass App extends React.Component {\n\n  state = {\n    user: undefined,\n    issues: [],\n    selectedIssue: undefined\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.selectIssue = this.selectIssue.bind(this);\n    this.onSelectedIssue = this.onSelectedIssue.bind(this);\n  }\n\n  componentDidMount() {\n    Promise.all([\n      GitHubValues.getUser(),\n      GitHubValues.getIssues()\n    ]).then(async ([user, issues]) => {\n      this.setState({\n        user,\n        issues,\n        selectedIssue: issues[0]\n      });\n    });\n  }\n\n  async selectIssue(issueNumber) {\n    const issueSelected = await GitHubValues.getSingleIssue(issueNumber);\n    this.setState({ selectedIssue: issueSelected });\n  }\n\n  async onSelectedIssue(issue) {\n    this.selectedIssue(issue.number);\n  }\n\n  render() {\n    return (\n      <div >\n        <GitHubContext.Provider value={this.state}>\n          <Container fluid className=\"Root\">\n            <Row>\n              <Col className=\"RemovePadding\" xs=\"12\" md=\"3\" lg=\"3\">\n                <Menu onSelectedIssue={this.onSelectedIssue} ></Menu>\n              </Col>\n              <Col xs=\"12\" md=\"9\" lg=\"9\">\n                <Content></Content>\n              </Col>\n            </Row>\n          </Container>\n        </GitHubContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}